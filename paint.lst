	                            ; Kalle Paint (NES, ASM6f)
	                            
	                                include "common.asm"
	                            ; Constants and macros used by many programs.
	                            
	                            ; --- Constants ------------------------------------------------------------------------------------
	                            
	                            ; addresses
	                            
	                            ppu_ctrl   equ $2000
	                            ppu_mask   equ $2001
	                            ppu_status equ $2002
	                            oam_addr   equ $2003
	                            oam_data   equ $2004
	                            ppu_scroll equ $2005
	                            ppu_addr   equ $2006
	                            ppu_data   equ $2007
	                            
	                            dmc_freq equ $4010
	                            oam_dma  equ $4014
	                            snd_chn  equ $4015
	                            joypad1  equ $4016
	                            joypad2  equ $4017
	                            
	                            ; joypad bitmasks
	                            
	                            button_a      = %10000000
	                            button_b      = %01000000
	                            button_select = %00100000
	                            button_start  = %00010000
	                            button_up     = %00001000
	                            button_down   = %00000100
	                            button_left   = %00000010
	                            button_right  = %00000001
	                            
	                            ; --- Macros ---------------------------------------------------------------------------------------
	                            
	                            macro initialize_nes
	                                ; Initialize the NES.
	                                ; Do this at the start of the program.
	                                ; Afterwards, do a wait_vblank before doing any PPU operations. In between, you have about
	                                ; 30,000 cycles to do non-PPU-related stuff.
	                                ; See http://wiki.nesdev.com/w/index.php/Init_code
	                            
	                                sei           ; ignore IRQs
	                                cld           ; disable decimal mode
	                                ldx #$40
	                                stx $4017   ; disable APU frame IRQ
	                                ldx #$ff
	                                txs           ; initialize stack pointer
	                                inx
	                                stx $2000  ; disable NMI
	                                stx $2001  ; disable rendering
	                                stx $4010  ; disable DMC IRQs
	                            
	                                wait_vblank_start
	                            endm
	                            
	                            macro wait_vblank
	                                ; wait until in VBlank
	                            -   bit $2002
	                                bpl -
	                            endm
	                            
	                            macro wait_vblank_start
	                                ; wait until at start of VBlank
	                                bit $2002
	                            -   bit $2002
	                                bpl -
	                            endm
	                            
	                            
	                                ; value to fill unused areas with
	                                fillvalue $ff
	                            
	                            ; --------------------------------------------------------------------------------------------------
	                            ; Constants
	                            
	                            ; Note: in flag variables, only the most significant bit is meaningful ($00-$7f = false, $80-$ff =
	                            ; true).
	                            ; Note: all address variables (2 bytes) are little endian (low byte, high byte).
	                            
	                            ; zero page
	                            user_palette           equ $00  ; 4 bytes (each $00-$3f)
	                            paint_area_offset      equ $04  ; 2 bytes (offset to nt_buffer and paint area in VRAM; $000-$2ff)
	                            nt_buffer_address      equ $06  ; 2 bytes (nt_buffer...nt_buffer+$2ff)
	                            paint_vram_address     equ $08  ; 2 bytes (ppu_paint_area_start...ppu_paint_area_start+$2ff)
	                            in_palette_editor      equ $0a  ; flag (in palette edit mode instead of paint mode?)
	                            execute_main_loop      equ $0b  ; flag (allow main loop to run once?)
	                            update_paint_area_vram equ $0c  ; flag (update paint area VRAM?)
	                            joypad_status          equ $0d  ; first joypad status (bits: A, B, select, start, up, down, left, right)
	                            prev_joypad_status     equ $0e  ; first joypad status on previous frame
	                            paint_move_delay_left  equ $0f  ; cursor move delay left (paint mode)
	                            paint_cursor_type      equ $10  ; cursor type (paint mode; 0=small, 1=big)
	                            paint_cursor_x         equ $11  ; cursor X position (paint mode; 0-63)
	                            paint_cursor_y         equ $12  ; cursor Y position (paint mode; 0-47)
	                            paint_color            equ $13  ; selected color (paint mode; 0-3)
	                            palette_cursor         equ $14  ; cursor position (palette edit mode; 0-3)
	                            temp                   equ $15  ; temporary
	                            
	                            ; other RAM
	                            sprite_data equ $0200  ; 256 bytes (first 9 paint mode sprites, then 13 palette editor sprites)
	                            nt_buffer   equ $0300  ; 800 = $320 = 32*25 bytes (copy of name table data of paint area)
	                            
	                            ; PPU
	                            ppu_paint_area_start equ $2080  ; 800 = $320 = 32*25 bytes
	                            
	                            ; colors
	                            black  equ $0f
	                            gray   equ $00
	                            white  equ $30
	                            red    equ $16
	                            yellow equ $28
	                            green  equ $1a
	                            blue   equ $02
	                            lblue  equ $12
	                            
	                            ; misc
	                            paint_mode_sprite_count     equ 10
	                            palette_editor_sprite_count equ 13
	                            cursor_move_delay           equ 10
	                            
	                            ; --- iNES header ----------------------------------------------------------------------------------
	                            
	                                inesprg 1  ; PRG ROM size: 1 * 16 KiB
	                                ineschr 0  ; CHR ROM size: 0 * 8 KiB (uses CHR RAM)
	                                inesmir 0  ; name table mirroring: horizontal
	                                inesmap 0  ; mapper: NROM
	                            
	                            ; --- Main parts -----------------------------------------------------------------------------------
	                            
	                                org $c000
0C000                               include "paint-init.asm"
0C000                           reset:
0C000                               initialize_nes
0C000                               ; Initialize the NES.
0C000                               ; Do this at the start of the program.
0C000                               ; Afterwards, do a wait_vblank before doing any PPU operations. In between, you have about
0C000                               ; 30,000 cycles to do non-PPU-related stuff.
0C000                               ; See http://wiki.nesdev.com/w/index.php/Init_code
0C000                           
0C000 78                            sei           ; ignore IRQs
0C001 D8                            cld           ; disable decimal mode
0C002 A2 40                         ldx #$40
0C004 8E 17 40                      stx $4017   ; disable APU frame IRQ
0C007 A2 FF                         ldx #$ff
0C009 9A                            txs           ; initialize stack pointer
0C00A E8                            inx
0C00B 8E 00 20                      stx $2000  ; disable NMI
0C00E 8E 01 20                      stx $2001  ; disable rendering
0C011 8E 10 40                      stx $4010  ; disable DMC IRQs
0C014                           
0C014                               wait_vblank_start
0C014                               ; wait until at start of VBlank
0C014 2C 02 20                      bit $2002
0C017 2C 02 20                  -   bit $2002
0C01A 10 FB                         bpl -
0C01C                           
0C01C                               ; disable all sound channels
0C01C A9 00                         lda #$00
0C01E 8D 15 40                      sta $4015
0C021                           
0C021                               ; clear zero page
0C021 A9 00                         lda #$00
0C023 AA                            tax
0C024 95 00                     -   sta $00, x
0C026 E8                            inx
0C027 D0 FB                         bne -
0C029                           
0C029                               ; clear nt_buffer (800 = 4 * 200 bytes)
0C029 A9 00                         lda #$00
0C02B AA                            tax
0C02C 9D 00 03                  -   sta $0300, x
0C02F 9D C8 03                      sta $0300 + 200, x
0C032 9D 90 04                      sta $0300 + 400, x
0C035 9D 58 05                      sta $0300 + 600, x
0C038 E8                            inx
0C039 E0 C8                         cpx #200
0C03B D0 EF                         bne -
0C03D                           
0C03D                               ; init user palette
0C03D A2 03                         ldx #3
0C03F BD 01 C1                  -   lda initial_palette, x
0C042 95 00                         sta $00, x
0C044 CA                            dex
0C045 10 F8                         bpl -
0C047                           
0C047 20 79 C0                      jsr set_sprite_data
0C04A                           
0C04A E6 13                         inc $13  ; default color: 1
0C04C                           
0C04C                               wait_for_vblank
0C04C                           
0C04C                               ; reset ppu_addr/ppu_scroll latch
0C04C 2C 02 20                      bit $2002
0C04F                           
0C04F 20 EE C0                      jsr set_palette
0C052 20 21 C1                      jsr set_pattern_tables
0C055 20 7E C3                      jsr set_name_table
0C058                           
0C058                               ; clear VRAM address & scroll
0C058 A9 00                         lda #$00
0C05A AA                            tax
0C05B 20 23 C4                      jsr set_vram_address
0C05E 8D 05 20                      sta $2005
0C061 8D 05 20                      sta $2005
0C064                           
0C064                               wait_vblank_start
0C064                               ; wait until at start of VBlank
0C064 2C 02 20                      bit $2002
0C067 2C 02 20                  -   bit $2002
0C06A 10 FB                         bpl -
0C06C                           
0C06C                               ; show background & sprites
0C06C A9 1E                         lda #%00011110
0C06E 8D 01 20                      sta $2001
0C071                           
0C071                               ; enable NMI, use pattern table 1 for sprites
0C071 A9 88                         lda #%10001000
0C073 8D 00 20                      sta $2000
0C076                           
0C076 4C 37 C4                      jmp main_loop
0C079                           
0C079                           ; --------------------------------------------------------------------------------------------------
0C079                           
0C079                           set_sprite_data:
0C079                               ; copy initial sprite data (paint mode, palette edit mode)
0C079 A2 5B                         ldx #((10 + 13) * 4 - 1)
0C07B BD 92 C0                  -   lda initial_sprite_data, x
0C07E 9D 00 02                      sta $0200, x
0C081 CA                            dex
0C082 10 F7                         bpl -
0C084                           
0C084                               ; hide palette editor sprites and unused sprites
0C084 A9 FF                         lda #$ff
0C086 A2 28                         ldx #(10 * 4)
0C088 9D 00 02                  -   sta $0200, x
0C08B E8                            inx
0C08C E8                            inx
0C08D E8                            inx
0C08E E8                            inx
0C08F D0 F7                         bne -
0C091                           
0C091 60                            rts
0C092                           
0C092                           initial_sprite_data:
0C092                               ; paint mode
0C092 FF 02 00 00                   db 0 * 8 - 1, $02, %00000000,  0 * 8   ; cursor
0C096 0B 00 00 E8                   db    12 - 1, $00, %00000000, 29 * 8   ; tens of X position
0C09A 0B 00 00 F0                   db    12 - 1, $00, %00000000, 30 * 8   ; ones of X position
0C09E 13 00 00 E8                   db    20 - 1, $00, %00000000, 29 * 8   ; tens of Y position
0C0A2 13 00 00 F0                   db    20 - 1, $00, %00000000, 30 * 8   ; ones of Y position
0C0A6 0B 1A 00 E0                   db    12 - 1, $1a, %00000000, 28 * 8   ; "X"
0C0AA 13 1B 00 E0                   db    20 - 1, $1b, %00000000, 28 * 8   ; "Y"
0C0AE 0F 01 00 D8                   db 2 * 8 - 1, $01, %00000000, 27 * 8   ; cover 1 for selected color
0C0B2 17 01 00 D0                   db 3 * 8 - 1, $01, %00000000, 26 * 8   ; cover 2 for selected color
0C0B6 17 01 00 D8                   db 3 * 8 - 1, $01, %00000000, 27 * 8   ; cover 3 for selected color
0C0BA                           
0C0BA                               ; palette edit mode
0C0BA AF 07 01 08                   db 22 * 8 - 1, $07, %00000001, 1 * 8   ; cursor
0C0BE AF 08 02 10                   db 22 * 8 - 1, $08, %00000010, 2 * 8   ; selected color 0
0C0C2 B7 09 02 10                   db 23 * 8 - 1, $09, %00000010, 2 * 8   ; selected color 1
0C0C6 BF 08 03 10                   db 24 * 8 - 1, $08, %00000011, 2 * 8   ; selected color 2
0C0CA C7 09 03 10                   db 25 * 8 - 1, $09, %00000011, 2 * 8   ; selected color 3
0C0CE CF 01 01 08                   db 26 * 8 - 1, $01, %00000001, 1 * 8   ; 16s  of color number
0C0D2 CF 01 01 10                   db 26 * 8 - 1, $01, %00000001, 2 * 8   ; ones of color number
0C0D6 A7 05 01 08                   db 21 * 8 - 1, $05, %00000001, 1 * 8   ; left half of "PAL"
0C0DA A7 06 01 10                   db 21 * 8 - 1, $06, %00000001, 2 * 8   ; right half of "PAL"
0C0DE AF 01 01 08                   db 22 * 8 - 1, $01, %00000001, 1 * 8   ; blank
0C0E2 B7 01 01 08                   db 23 * 8 - 1, $01, %00000001, 1 * 8   ; blank
0C0E6 BF 01 01 08                   db 24 * 8 - 1, $01, %00000001, 1 * 8   ; blank
0C0EA C7 01 01 08                   db 25 * 8 - 1, $01, %00000001, 1 * 8   ; blank
0C0EE                           
0C0EE                           ; --------------------------------------------------------------------------------------------------
0C0EE                           
0C0EE                           set_palette:
0C0EE                               ; set palette
0C0EE A9 3F                         lda #$3f
0C0F0 A2 00                         ldx #$00
0C0F2 20 23 C4                      jsr set_vram_address
0C0F5 BD 01 C1                  -   lda initial_palette, x
0C0F8 8D 07 20                      sta $2007
0C0FB E8                            inx
0C0FC E0 20                         cpx #32
0C0FE D0 F5                         bne -
0C100 60                            rts
0C101                           
0C101                           initial_palette:
0C101                               ; background
0C101 30 16 1A 02                   db $30, $16,    $1a, $02    ; paint area; same as two last sprite subpalettes
0C105 30 28 02 12                   db $30, $28, $02,  $12   ; top bar
0C109 30 30 30 30                   db $30, $30,  $30, $30   ; unused
0C10D 30 30 30 30                   db $30, $30,  $30, $30   ; unused
0C111                               ; sprites
0C111 30 28 0F 00                   db $30, $28, $0f, $00    ; status bar cover sprite, status bar text, paint cursor
0C115 30 0F 30 28                   db $30, $0f,  $30, $28  ; palette editor - text and cursor
0C119 30 0F 30 16                   db $30, $0f,  $30, $16     ; palette editor - selected colors 0&1
0C11D 30 0F 1A 02                   db $30, $0f,  $1a, $02    ; palette editor - selected colors 2&3
0C121                           
0C121                           ; --------------------------------------------------------------------------------------------------
0C121                           
0C121                           set_pattern_tables:
0C121                               ; first half of CHR RAM (background)
0C121                           
0C121                               ; all combinations of 2*2 subpixels * 4 colors
0C121                               ; bits of tile index: AaBbCcDd
0C121                               ; corresponding subpixel colors (capital letter = MSB, small letter = LSB):
0C121                               ; Aa Bb
0C121                               ; Cc Dd
0C121                           
0C121 A9 00                         lda #$00
0C123 AA                            tax
0C124 20 23 C4                      jsr set_vram_address
0C127 A0 0F                         ldy #15
0C129 A2 0F                     --  ldx #15
0C12B B9 5E C1                  -   lda background_chr_data1, y
0C12E 20 2A C4                      jsr print_four_times
0C131 BD 5E C1                      lda background_chr_data1, x
0C134 20 2A C4                      jsr print_four_times
0C137 B9 6E C1                      lda background_chr_data2, y
0C13A 20 2A C4                      jsr print_four_times
0C13D BD 6E C1                      lda background_chr_data2, x
0C140 20 2A C4                      jsr print_four_times
0C143 CA                            dex
0C144 10 E5                         bpl -
0C146 88                            dey
0C147 10 E0                         bpl --
0C149                           
0C149                               ; second half of CHR RAM (sprites; 32 tiles, 512 bytes)
0C149 A2 00                         ldx #0
0C14B BD 7E C1                  -   lda sprite_chr_data, x
0C14E 8D 07 20                      sta $2007
0C151 E8                            inx
0C152 D0 F7                         bne -
0C154 BD 7E C2                  -   lda sprite_chr_data + 256, x
0C157 8D 07 20                      sta $2007
0C15A E8                            inx
0C15B D0 F7                         bne -
0C15D                           
0C15D 60                            rts
0C15E                           
0C15E                           background_chr_data1:
0C15E                               ; read backwards
0C15E FF F0 FF F0 0F 00 0F 00..     hex ff f0 ff f0  0f 00 0f 00  ff f0 ff f0  0f 00 0f 00
0C16E                           
0C16E                           background_chr_data2:
0C16E                               ; read backwards
0C16E FF FF F0 F0 FF FF F0 F0..     hex ff ff f0 f0  ff ff f0 f0  0f 0f 00 00  0f 0f 00 00
0C17E                           
0C17E                           sprite_chr_data:
0C17E                               ; 32 tiles (512 bytes)
0C17E 00 00 00 00 00 00 00 00..     incbin "sprites.bin"
0C37E                           
0C37E                           ; --------------------------------------------------------------------------------------------------
0C37E                           
0C37E                           set_name_table:
0C37E                               ; Set name table 0 and attribute table 0.
0C37E                           
0C37E A9 20                         lda #$20
0C380 A2 00                         ldx #$00
0C382 20 23 C4                      jsr set_vram_address
0C385                           
0C385                               ; name table
0C385                           
0C385                               ; top bar (4 rows)
0C385 A9 55                         lda #%01010101  ; block of color 1
0C387 A2 20                         ldx #32
0C389 20 BC C3                      jsr print_repeatedly
0C38C A2 00                         ldx #0
0C38E BD C3 C3                  -   lda logo, x
0C391 8D 07 20                      sta $2007
0C394 E8                            inx
0C395 E0 60                         cpx #(3 * 32)
0C397 D0 F5                         bne -
0C399                           
0C399                               ; paint area (25 rows) + bottom bar (1 row)
0C399 A9 00                         lda #$00
0C39B A2 D0                         ldx #(26 * 8)
0C39D 20 2A C4                  -   jsr print_four_times
0C3A0 CA                            dex
0C3A1 D0 FA                         bne -
0C3A3                           
0C3A3                               ; attribute table
0C3A3                           
0C3A3                               ; top bar
0C3A3 A9 55                         lda #%01010101
0C3A5 A2 06                         ldx #6
0C3A7 20 BC C3                      jsr print_repeatedly
0C3AA A9 15                         lda #%00010101
0C3AC 8D 07 20                      sta $2007
0C3AF A9 55                         lda #%01010101
0C3B1 8D 07 20                      sta $2007
0C3B4                           
0C3B4                               ; paint area + bottom bar
0C3B4 A9 00                         lda #%00000000
0C3B6 A2 38                         ldx #(7 * 8)
0C3B8 20 BC C3                      jsr print_repeatedly
0C3BB                           
0C3BB 60                            rts
0C3BC                           
0C3BC                           print_repeatedly:
0C3BC                               ; print A X times
0C3BC 8D 07 20                  -   sta $2007
0C3BF CA                            dex
0C3C0 D0 FA                         bne -
0C3C2 60                            rts
0C3C3                           
0C3C3                           logo:
0C3C3                               ; Output from "paint-logo-encode.py".
0C3C3                               ; 32*3 bytes (tile indexes), 64*6 pixels.
0C3C3                               ; 1 byte = 2*2 pixels:
0C3C3                               ; - bits: AaBbCcDd
0C3C3                               ; - pixels: Aa = upper left, Bb = upper right, Cc = lower left, Dd = lower right
0C3C3                               ; - capital letter = MSB, small letter = LSB
0C3C3                           
0C3C3 55 D9 79 55 F5 59 F6 55..     incbin "logo.bin"
0C423                           
0C423                           ; --------------------------------------------------------------------------------------------------
0C423                           
0C423                           set_vram_address:
0C423                               ; A = high byte, X = low byte
0C423 8D 06 20                      sta $2006
0C426 8E 06 20                      stx $2006
0C429 60                            rts
0C42A                           
0C42A                           print_four_times:
0C42A 8D 07 20                      sta $2007
0C42D 8D 07 20                      sta $2007
0C430 8D 07 20                      sta $2007
0C433 8D 07 20                      sta $2007
0C436 60                            rts
0C437                           
0C437                               include "paint-mainloop.asm"
0C437                           main_loop:
0C437                               ; wait until NMI has set flag
0C437 24 0B                         bit $0b
0C439 10 FC                         bpl main_loop
0C43B                           
0C43B                               ; joypad: remember previous status, get new
0C43B A5 0D                         lda $0d
0C43D 85 0E                         sta $0e
0C43F 20 54 C4                      jsr read_joypad
0C442                           
0C442                               ; run one of two subs depending on the mode we're in
0C442 24 0A                         bit $0a
0C444 30 06                         bmi +                  ; branch if flag set
0C446 20 6D C4                      jsr main_loop_paint_mode
0C449 4C 4F C4                      jmp ++
0C44C 20 F1 C5                  +   jsr main_loop_palette_edit_mode
0C44F                           
0C44F                               ; clear flag (to run main loop only once per frame)
0C44F 46 0B                     ++  lsr $0b
0C451 4C 37 C4                      jmp main_loop
0C454                           
0C454                           ; --------------------------------------------------------------------------------------------------
0C454                           
0C454                           read_joypad:
0C454                               ; Read joypad status, save to joypad_status.
0C454                               ; Bits: A, B, select, start, up, down, left, right.
0C454                           
0C454 A2 01                         ldx #$01
0C456 86 0D                         stx $0d  ; to detect end of loop
0C458 8E 16 40                      stx $4016
0C45B CA                            dex
0C45C 8E 16 40                      stx $4016
0C45F                           
0C45F 18                        -   clc
0C460 AD 16 40                      lda $4016
0C463 29 03                         and #$03
0C465 F0 01                         beq +
0C467 38                            sec
0C468 26 0D                     +   rol $0d
0C46A 90 F3                         bcc -
0C46C                           
0C46C 60                            rts
0C46D                           
0C46D                           ; --------------------------------------------------------------------------------------------------
0C46D                           
0C46D                           main_loop_paint_mode:
0C46D                               ; ignore B, select, start if any of them was pressed on previous frame
0C46D A5 0E                         lda $0e
0C46F 29 70                         and #(button_b | button_select | button_start)
0C471 D0 0E                         bne paint_arrow_logic
0C473                           
0C473                               ; check B, select, start
0C473 A5 0D                         lda $0d
0C475 C9 40                         cmp #button_b
0C477 F0 3C                         beq change_color          ; ends with rts
0C479 C9 20                         cmp #button_select
0C47B F0 41                         beq enter_palette_editor  ; ends with rts
0C47D C9 10                         cmp #button_start
0C47F F0 58                         beq change_cursor_type    ; ends with rts
0C481                           
0C481                           paint_arrow_logic:
0C481                               ; if no arrow pressed, clear cursor movement delay
0C481 A5 0D                         lda $0d
0C483 29 0F                         and #$0f
0C485 D0 05                         bne +
0C487 85 0F                         sta $0f
0C489 4C 9F C4                      jmp paint_arrow_logic_done
0C48C                               ; else if delay > 0, decrement it
0C48C A5 0F                     +   lda $0f
0C48E F0 05                         beq +
0C490 C6 0F                         dec $0f
0C492 4C 9F C4                      jmp paint_arrow_logic_done
0C495                               ; else react to arrows and reinitialize delay
0C495 20 EF C4                  +   jsr check_horizontal_arrows
0C498 20 0A C5                      jsr check_vertical_arrows
0C49B A9 0A                         lda #10
0C49D 85 0F                         sta $0f
0C49F                           
0C49F                           paint_arrow_logic_done:
0C49F                               ; make sprite data reflect changes to cursor
0C49F 20 34 C5                      jsr update_paint_mode_sprite_data
0C4A2                           
0C4A2                               ; if A pressed, tell NMI routine to paint
0C4A2 A5 0D                         lda $0d
0C4A4 29 80                         and #button_a
0C4A6 F0 0C                         beq +
0C4A8                           
0C4A8 20 66 C5                      jsr get_paint_area_offset    ; paint_cursor_x, paint_cursor_y -> paint_area_offset
0C4AB 20 80 C5                      jsr compute_paint_addresses  ; paint_area_offset -> nt_buffer_address, paint_vram_address
0C4AE 20 9B C5                      jsr update_nt_buffer         ; update nt_buffer
0C4B1                           
0C4B1                               ; set flag to tell NMI to update VRAM
0C4B1 38                            sec
0C4B2 66 0C                         ror $0c
0C4B4                           
0C4B4 60                        +   rts
0C4B5                           
0C4B5                           ; --------------------------------------------------------------------------------------------------
0C4B5                           
0C4B5                           change_color:
0C4B5                               ; cycle between 4 colors
0C4B5 A6 13                         ldx $13
0C4B7 E8                            inx
0C4B8 8A                            txa
0C4B9 29 03                         and #%00000011
0C4BB 85 13                         sta $13
0C4BD 60                            rts
0C4BE                           
0C4BE                           ; --------------------------------------------------------------------------------------------------
0C4BE                           
0C4BE                           enter_palette_editor:
0C4BE                               ; init palette cursor position
0C4BE A9 00                         lda #0
0C4C0 85 14                         sta $14
0C4C2                           
0C4C2                               ; hide paint cursor
0C4C2 A9 FF                         lda #$ff
0C4C4 8D 00 02                      sta $0200 + 0 * 4 + 0
0C4C7                           
0C4C7                               ; show all palette editor sprites
0C4C7 A2 30                         ldx #((13 - 1) * 4)
0C4C9 BD BA C0                  -   lda initial_sprite_data + 10 * 4, x
0C4CC 9D 28 02                      sta $0200 + 10 * 4, x
0C4CF CA                            dex
0C4D0 CA                            dex
0C4D1 CA                            dex
0C4D2 CA                            dex
0C4D3 10 F4                         bpl -
0C4D5                           
0C4D5                               ; set flag
0C4D5 38                            sec
0C4D6 66 0A                         ror $0a
0C4D8                           
0C4D8 60                            rts
0C4D9                           
0C4D9                           ; --------------------------------------------------------------------------------------------------
0C4D9                           
0C4D9                           change_cursor_type:
0C4D9                               ; toggle between small and big cursor, update sprite tile
0C4D9 A5 10                         lda $10
0C4DB 49 01                         eor #%00000001
0C4DD 85 10                         sta $10
0C4DF 09 02                         ora #2
0C4E1 8D 01 02                      sta $0200 + 0 + 1
0C4E4                           
0C4E4                               ; if big, make coordinates even
0C4E4 F0 08                         beq +
0C4E6 46 11                         lsr $11
0C4E8 06 11                         asl $11
0C4EA 46 12                         lsr $12
0C4EC 06 12                         asl $12
0C4EE                           
0C4EE 60                        +   rts
0C4EF                           
0C4EF                           ; --------------------------------------------------------------------------------------------------
0C4EF                           
0C4EF                           check_horizontal_arrows:
0C4EF                               ; React to left/right arrow.
0C4EF                               ; Reads: joypad_status, paint_cursor_x, paint_cursor_type
0C4EF                               ; Changes: paint_cursor_x
0C4EF                           
0C4EF A5 0D                         lda $0d
0C4F1 4A                            lsr
0C4F2 B0 04                         bcs paint_right
0C4F4 4A                            lsr
0C4F5 B0 09                         bcs paint_left
0C4F7 60                            rts
0C4F8                           
0C4F8                           paint_right:
0C4F8 A5 11                         lda $11
0C4FA 38                            sec
0C4FB 65 10                         adc $10
0C4FD 4C 05 C5                      jmp store_horizontal
0C500                           paint_left:
0C500 A5 11                         lda $11
0C502 18                            clc
0C503 E5 10                         sbc $10
0C505                           store_horizontal:
0C505 29 3F                         and #%00111111
0C507 85 11                         sta $11
0C509 60                            rts
0C50A                           
0C50A                           ; --------------------------------------------------------------------------------------------------
0C50A                           
0C50A                           check_vertical_arrows:
0C50A                               ; React to up/down arrow.
0C50A                               ; Reads: joypad_status, paint_cursor_y, paint_cursor_type
0C50A                               ; Changes: paint_cursor_y
0C50A                           
0C50A A5 0D                         lda $0d
0C50C 4A                            lsr
0C50D 4A                            lsr
0C50E 4A                            lsr
0C50F B0 04                         bcs paint_cursor_down
0C511 4A                            lsr
0C512 B0 0F                         bcs paint_cursor_up
0C514 60                            rts
0C515                           
0C515                           paint_cursor_down:
0C515 A5 12                         lda $12
0C517 38                            sec
0C518 65 10                         adc $10
0C51A C9 32                         cmp #50
0C51C D0 11                         bne store_vertical
0C51E A9 00                         lda #0
0C520 4C 2F C5                      jmp store_vertical
0C523                           paint_cursor_up:
0C523 A5 12                         lda $12
0C525 18                            clc
0C526 E5 10                         sbc $10
0C528 10 05                         bpl store_vertical
0C52A A9 32                         lda #50
0C52C 18                            clc
0C52D E5 10                         sbc $10
0C52F                           store_vertical:
0C52F 29 3F                         and #%00111111
0C531 85 12                         sta $12
0C533 60                            rts
0C534                           
0C534                           ; --------------------------------------------------------------------------------------------------
0C534                           
0C534                           update_paint_mode_sprite_data:
0C534                               ; Update sprite data regarding cursor position.
0C534                               ; Reads: paint_cursor_x, paint_cursor_y
0C534                               ; Writes: sprite_data
0C534                           
0C534                               ; cursor sprite X position
0C534 A5 11                         lda $11
0C536 0A                            asl
0C537 0A                            asl
0C538 8D 03 02                      sta $0200 + 0 + 3
0C53B                           
0C53B                               ; cursor sprite Y position
0C53B A5 12                         lda $12
0C53D 0A                            asl
0C53E 0A                            asl
0C53F 18                            clc
0C540 69 1F                         adc #(4 * 8 - 1)
0C542 8D 00 02                      sta $0200 + 0 + 0
0C545                           
0C545                               ; tiles of X position sprites
0C545 A5 11                         lda $11
0C547 48                            pha
0C548 20 DA C5                      jsr to_decimal_tens_tile
0C54B 8D 05 02                      sta $0200 + 4 + 1
0C54E 68                            pla
0C54F 20 E6 C5                      jsr to_decimal_ones_tile
0C552 8D 09 02                      sta $0200 + 2 * 4 + 1
0C555                           
0C555                               ; tiles of Y position sprites
0C555 A5 12                         lda $12
0C557 48                            pha
0C558 20 DA C5                      jsr to_decimal_tens_tile
0C55B 8D 0D 02                      sta $0200 + 3 * 4 + 1
0C55E 68                            pla
0C55F 20 E6 C5                      jsr to_decimal_ones_tile
0C562 8D 11 02                      sta $0200 + 4 * 4 + 1
0C565                           
0C565 60                            rts
0C566                           
0C566                           get_paint_area_offset:
0C566                               ; Compute offset within name table data of paint area from paint_cursor_x and paint_cursor_y.
0C566                               ; Bits of paint_cursor_y    (0-49):  ABCDEF
0C566                               ; Bits of paint_cursor_x    (0-63):  abcdef
0C566                               ; Bits of paint_area_offset (0-799): 000000AB CDEabcde
0C566                           
0C566                               ; high byte
0C566 A5 12                         lda $12  ; 00ABCDEF
0C568 4A                            lsr
0C569 4A                            lsr
0C56A 4A                            lsr
0C56B 4A                            lsr                 ; 000000AB
0C56C 85 05                         sta $04 + 1
0C56E                           
0C56E                               ; low byte
0C56E A5 12                         lda $12  ; 00ABCDEF
0C570 29 0E                         and #$0e            ; 0000CDE0
0C572 0A                            asl
0C573 0A                            asl
0C574 0A                            asl
0C575 0A                            asl
0C576 85 15                         sta $15            ; CDE00000
0C578 A5 11                         lda $11  ; 00abcdef
0C57A 4A                            lsr                 ; 000abcde
0C57B 05 15                         ora $15            ; CDEabcde
0C57D 85 04                         sta $04 + 0
0C57F                           
0C57F 60                            rts
0C580                           
0C580                           compute_paint_addresses:
0C580                               ; Reads: paint_area_offset
0C580                               ; Writes: nt_buffer_address, paint_vram_address
0C580                           
0C580                               ; nt_buffer + paint_area_offset -> nt_buffer_address
0C580 18                            clc
0C581 A9 00                         lda #<$0300
0C583 65 04                         adc $04 + 0
0C585 85 06                         sta $06 + 0
0C587 A9 03                         lda #>$0300
0C589 65 05                         adc $04 + 1
0C58B 85 07                         sta $06 + 1
0C58D                           
0C58D                               ; ppu_paint_area_start + paint_area_offset -> paint_vram_address
0C58D 18                            clc
0C58E A9 80                         lda #<$2080
0C590 65 04                         adc $04 + 0
0C592 85 08                         sta $08 + 0
0C594 A9 20                         lda #>$2080
0C596 65 05                         adc $04 + 1
0C598 85 09                         sta $08 + 1
0C59A                           
0C59A 60                            rts
0C59B                           
0C59B                           ; --------------------------------------------------------------------------------------------------
0C59B                           
0C59B                           update_nt_buffer:
0C59B                               ; Update a byte in nt_buffer.
0C59B                               ; In: paint_cursor_type, paint_cursor_x, paint_cursor_y, paint_color, nt_buffer_address, nt_buffer
0C59B                               ; Writes: nt_buffer
0C59B                           
0C59B                               ; get new byte
0C59B                           
0C59B A5 10                         lda $10
0C59D F0 08                         beq +
0C59F                           
0C59F                               ; big cursor; just fetch correct solid color tile
0C59F A6 13                         ldx $13
0C5A1 BD FD C6                      lda solid_color_tiles, x
0C5A4 4C C1 C5                      jmp ++
0C5A7                           
0C5A7                               ; small cursor; replace two bits within old byte
0C5A7                           
0C5A7                               ; old byte -> stack
0C5A7 A0 00                     +   ldy #0
0C5A9 B1 06                         lda ($06), y
0C5AB 48                            pha
0C5AC                               ; position within tile (0-3) -> A, X
0C5AC A5 11                         lda $11
0C5AE 6A                            ror
0C5AF A5 12                         lda $12
0C5B1 2A                            rol
0C5B2 29 03                         and #%00000011
0C5B4 AA                            tax
0C5B5                               ; position_within_tile * 4 + paint_color -> Y
0C5B5 0A                            asl
0C5B6 0A                            asl
0C5B7 05 13                         ora $13
0C5B9 A8                            tay
0C5BA                               ; pull old byte
0C5BA 68                            pla
0C5BB                               ; clear bits to replace
0C5BB 3D C6 C5                      and nt_and_masks, x
0C5BE                               ; write new bits
0C5BE 19 CA C5                      ora nt_or_masks, y
0C5C1                           
0C5C1                               ; overwrite old byte
0C5C1 A0 00                     ++  ldy #0
0C5C3 91 06                         sta ($06), y
0C5C5 60                            rts
0C5C6                           
0C5C6                           nt_and_masks:
0C5C6 3F CF F3 FC                   db %00111111, %11001111, %11110011, %11111100
0C5CA                           
0C5CA                           nt_or_masks:
0C5CA 00 40 80 C0                   db %00000000, %01000000, %10000000, %11000000
0C5CE 00 10 20 30                   db %00000000, %00010000, %00100000, %00110000
0C5D2 00 04 08 0C                   db %00000000, %00000100, %00001000, %00001100
0C5D6 00 01 02 03                   db %00000000, %00000001, %00000010, %00000011
0C5DA                           
0C5DA                           ; --------------------------------------------------------------------------------------------------
0C5DA                           
0C5DA                           to_decimal_tens_tile:
0C5DA                               ; In: A = unsigned integer
0C5DA                               ; Out: A = tile number for decimal tens
0C5DA                           
0C5DA A2 FF                         ldx #$ff
0C5DC 38                            sec
0C5DD E8                        -   inx
0C5DE E9 0A                         sbc #10
0C5E0 B0 FB                         bcs -
0C5E2                           
0C5E2 8A                            txa
0C5E3 69 0A                         adc #$0a  ; tile number for "0"
0C5E5 60                            rts
0C5E6                           
0C5E6                           to_decimal_ones_tile:
0C5E6                               ; In: A = unsigned integer
0C5E6                               ; Out: A = tile number for decimal ones
0C5E6                           
0C5E6 38                            sec
0C5E7 E9 0A                     -   sbc #10
0C5E9 B0 FC                         bcs -
0C5EB 69 0A                         adc #10
0C5ED                           
0C5ED 18                            clc
0C5EE 69 0A                         adc #$0a  ; tile number for "0"
0C5F0 60                            rts
0C5F1                           
0C5F1                           ; --------------------------------------------------------------------------------------------------
0C5F1                           
0C5F1                           main_loop_palette_edit_mode:
0C5F1                               ; get color at cursor
0C5F1 A6 14                         ldx $14
0C5F3 B4 00                         ldy $00, x
0C5F5                           
0C5F5                               ; ignore all buttons if anything was pressed on previous frame
0C5F5 A5 0E                         lda $0e
0C5F7 D0 61                         bne update_palette_editor_sprite_data  ; ends with rts
0C5F9                           
0C5F9 A5 0D                         lda $0d
0C5FB 4A                            lsr
0C5FC B0 23                         bcs small_color_increment  ; right
0C5FE 4A                            lsr
0C5FF B0 1E                         bcs small_color_decrement  ; left
0C601 4A                            lsr
0C602 B0 11                         bcs palette_cursor_down    ; down
0C604 4A                            lsr
0C605 B0 0C                         bcs palette_cursor_up      ; up
0C607 4A                            lsr
0C608 4A                            lsr
0C609 B0 39                         bcs exit_palette_editor    ; select; ends with rts
0C60B 4A                            lsr
0C60C B0 24                         bcs large_color_decrement  ; B
0C60E D0 29                         bne large_color_increment  ; A
0C610                           
0C610                               ; nothing pressed
0C610 4C 5A C6                      jmp update_palette_editor_sprite_data  ; ends with rts
0C613                           
0C613                           ; --------------------------------------------------------------------------------------------------
0C613                           
0C613                           palette_cursor_up:
0C613 CA                            dex
0C614 CA                            dex
0C615                           palette_cursor_down:
0C615 E8                            inx
0C616 8A                            txa
0C617 29 03                         and #%00000011
0C619 85 14                         sta $14
0C61B AA                            tax
0C61C 4C 5A C6                      jmp update_palette_editor_sprite_data  ; ends with rts
0C61F                           
0C61F                           small_color_decrement:
0C61F 88                            dey
0C620 88                            dey
0C621                           small_color_increment:
0C621 C8                            iny
0C622 98                            tya
0C623 29 0F                         and #$0f
0C625 85 15                         sta $15
0C627 B5 00                         lda $00, x
0C629 29 F0                         and #$f0
0C62B 05 15                         ora $15
0C62D 95 00                         sta $00, x
0C62F 4C 5A C6                      jmp update_palette_editor_sprite_data  ; ends with rts
0C632                           
0C632                           large_color_decrement:
0C632 98                            tya
0C633 38                            sec
0C634 E9 10                         sbc #$10
0C636 4C 3D C6                      jmp +
0C639                           large_color_increment:
0C639 98                            tya
0C63A 18                            clc
0C63B 69 10                         adc #$10
0C63D 29 3F                     +   and #%00111111
0C63F 95 00                         sta $00, x
0C641 4C 5A C6                      jmp update_palette_editor_sprite_data  ; ends with rts
0C644                           
0C644                           ; --------------------------------------------------------------------------------------------------
0C644                           
0C644                           exit_palette_editor:
0C644                               ; show paint cursor
0C644 AD 92 C0                      lda initial_sprite_data + 0 * 4 + 0
0C647 8D 00 02                      sta $0200 + 0 * 4 + 0
0C64A                           
0C64A                               ; hide all palette editor sprites
0C64A A9 FF                         lda #$ff
0C64C A2 30                         ldx #((13 - 1) * 4)
0C64E 9D 28 02                  -   sta $0200 + 10 * 4, x
0C651 CA                            dex
0C652 CA                            dex
0C653 CA                            dex
0C654 CA                            dex
0C655 10 F7                         bpl -
0C657                           
0C657 46 0A                         lsr $0a  ; clear flag
0C659 60                            rts
0C65A                           
0C65A                           ; --------------------------------------------------------------------------------------------------
0C65A                           
0C65A                           update_palette_editor_sprite_data:
0C65A                               ; Update palette editor sprite data.
0C65A                               ; Reads: palette_cursor, user_palette
0C65A                               ; Writes: sprite_data
0C65A                           
0C65A A6 14                         ldx $14
0C65C                           
0C65C                               ; cursor sprite Y position
0C65C 8A                            txa
0C65D 0A                            asl
0C65E 0A                            asl
0C65F 0A                            asl
0C660 18                            clc
0C661 69 AF                         adc #(22 * 8 - 1)
0C663 8D 28 02                      sta $0200 + 10 * 4 + 0
0C666                           
0C666                               ; 16s of color number (sprite tile)
0C666 B5 00                         lda $00, x
0C668 4A                            lsr
0C669 4A                            lsr
0C66A 4A                            lsr
0C66B 4A                            lsr
0C66C 18                            clc
0C66D 69 0A                         adc #10
0C66F 8D 3D 02                      sta $0200 + (10 + 5) * 4 + 1
0C672                           
0C672                               ; ones of color number (sprite tile)
0C672 B5 00                         lda $00, x
0C674 29 0F                         and #$0f
0C676 18                            clc
0C677 69 0A                         adc #$0a
0C679 8D 41 02                      sta $0200 + (10 + 6) * 4 + 1
0C67C                           
0C67C 60                            rts
0C67D                           
0C67D                               include "paint-nmi.asm"
0C67D                           nmi:
0C67D                               ; push A, X, Y
0C67D 48                            pha
0C67E 8A                            txa
0C67F 48                            pha
0C680 98                            tya
0C681 48                            pha
0C682                           
0C682                               ; copy sprite data from RAM to PPU
0C682 A9 02                         lda #>$0200
0C684 8D 14 40                      sta $4014
0C687                           
0C687                               ; reset ppu_addr/ppu_scroll latch
0C687 2C 02 20                      bit $2002
0C68A                           
0C68A                               ; run one of two subs depending on the mode we're in
0C68A 24 0A                         bit $0a
0C68C 30 06                         bmi +
0C68E 20 AE C6                      jsr nmi_paint_mode
0C691 4C 97 C6                      jmp ++
0C694 20 D8 C6                  +   jsr nmi_palette_edit_mode
0C697                           
0C697                               ; reset VRAM address & scroll
0C697 A9 00                     ++  lda #$00
0C699 8D 06 20                      sta $2006
0C69C 8D 06 20                      sta $2006
0C69F 8D 05 20                      sta $2005
0C6A2 8D 05 20                      sta $2005
0C6A5                           
0C6A5                               ; set flag to allow main loop to run once
0C6A5 38                            sec
0C6A6 66 0B                         ror $0b
0C6A8                           
0C6A8                               ; pull Y, X, A
0C6A8 68                            pla
0C6A9 A8                            tay
0C6AA 68                            pla
0C6AB AA                            tax
0C6AC 68                            pla
0C6AD                           
0C6AD 40                            rti
0C6AE                           
0C6AE                           ; --- Paint mode -----------------------------------------------------------------------------------
0C6AE                           
0C6AE                           nmi_paint_mode:
0C6AE                               ; update selected color to top bar (NT 0, row 2, column 26)
0C6AE A6 13                         ldx $13
0C6B0 BD FD C6                      lda solid_color_tiles, x
0C6B3 A2 20                         ldx #$20
0C6B5 8E 06 20                      stx $2006
0C6B8 A2 5A                         ldx #$5a
0C6BA 8E 06 20                      stx $2006
0C6BD 8D 07 20                      sta $2007
0C6C0                           
0C6C0                               ; update one byte in VRAM paint area from nt_buffer if requested by main loop
0C6C0                           
0C6C0 24 0C                         bit $0c
0C6C2 10 13                         bpl +
0C6C4                           
0C6C4 A5 09                         lda $08 + 1
0C6C6 8D 06 20                      sta $2006
0C6C9 A5 08                         lda $08 + 0
0C6CB 8D 06 20                      sta $2006
0C6CE A0 00                         ldy #0
0C6D0 B1 06                         lda ($06), y
0C6D2 8D 07 20                      sta $2007
0C6D5 46 0C                         lsr $0c  ; clear flag
0C6D7                           
0C6D7 60                        +   rts
0C6D8                           
0C6D8                           ; --- Palette edit mode ----------------------------------------------------------------------------
0C6D8                           
0C6D8                           nmi_palette_edit_mode:
0C6D8 A6 14                         ldx $14  ; cursor position
0C6DA A0 3F                         ldy #$3f            ; high byte of ppu_addr
0C6DC 2C 02 20                      bit $2002      ; reset ppu_addr latch
0C6DF                           
0C6DF                               ; copy selected color to first background subpalette
0C6DF 8C 06 20                      sty $2006
0C6E2 8E 06 20                      stx $2006
0C6E5 B5 00                         lda $00, x
0C6E7 8D 07 20                      sta $2007
0C6EA                           
0C6EA                               ; copy selected color to third/fourth sprite subpalette
0C6EA 8C 06 20                      sty $2006
0C6ED BD F9 C6                      lda selected_color_offsets, x
0C6F0 8D 06 20                      sta $2006
0C6F3 B5 00                         lda $00, x
0C6F5 8D 07 20                      sta $2007
0C6F8                           
0C6F8 60                            rts
0C6F9                           
0C6F9                           selected_color_offsets:
0C6F9 1A                            db (4 + 2) * 4 + 2
0C6FA 1B                            db (4 + 2) * 4 + 3
0C6FB 1E                            db (4 + 3) * 4 + 2
0C6FC 1F                            db (4 + 3) * 4 + 3
0C6FD                           
0C6FD                           
0C6FD                           ; --- Subs/tables used by more than one part -------------------------------------------------------
0C6FD                           
0C6FD                           solid_color_tiles:
0C6FD                               ; tiles of solid color 0/1/2/3
0C6FD 00 55 AA FF                   hex 00 55 aa ff
0C701                           
0C701                           ; --- Interrupt vectors ----------------------------------------------------------------------------
0C701                           
0C701 FF FF FF FF FF FF FF FF..     pad $fffa
0FFFA 7D C6 00 C0 FF FF             dw nmi, reset, $ffff
10000                           
